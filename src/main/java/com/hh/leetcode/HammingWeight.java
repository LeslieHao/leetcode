package com.hh.leetcode;

/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 * <p>
 * <p>
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的示例 3中，输入表示有符号整数 -3。
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。
 * 示例 2：
 * <p>
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。
 * 示例 3：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/number-of-1-bits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 * @author HaoHao
 * @date 2022/1/11 10:43 下午
 */
public class HammingWeight {

    public int hammingWeight(int n) {
        int c = 0;
        while (n != 0) {
            c++;
            // 消除最后一个1
            n = n & (n - 1);
        }
        return c;
    }

    /**
     *  Java 中的 算术右移和 逻辑右移。
     *
     * 算术右移 >>：舍弃最低位，高位用符号位填补；
     * 逻辑右移 >>>：舍弃最低位，高位用 0 填补。
     * 那么对于负数而言，其二进制最高位是 1，如果使用算术右移，那么高位填补的仍然是 1。也就是 n 永远不会为 0。所以下面的代码会超时 TLE。
     *
     */
    public static int hammingWeight1(int n) {
        int c = 0;
        while (n != 0) {
            if ((n & 1) == 1) {
                c++;
            }
            n = n >>> 1;
        }
        return c;
    }

    public static void main(String[] args) {
        System.out.println(hammingWeight1(-3));
    }
}
